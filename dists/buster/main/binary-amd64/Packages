Package: apachetraffic
Version: 0.0.2-4
Architecture: amd64
Maintainer: Kiss K치roly P치l <kiss.karoly.pal@gmail.com>
Installed-Size: 6156
Depends: libc6 (>= 2.3.2)
Priority: optional
Section: net
Filename: pool/main/a/apachetraffic/apachetraffic_0.0.2-4_amd64.deb
Size: 3144312
SHA256: 6432f32ae01cb88becbb8d05986d8dcb0b206b2f5cd8e7b9bb3c325e27165902
SHA1: 6b66e849042443c5a9dada6ca34ef0d5efc6e21c
MD5sum: a409840daba1ef4edfda7d866aeb6656
Description: Apache traffic collector application. Data is sent to graphite. (program)
 A simple application that collects and sends traffic generated by apache to graphite.
 .
 Adjust graphite address and prefix in /etc/apachetraffic/apachetraffic.toml to fit your
 needs, enable the confiuration by running
 .
 a2enconf traffic
 .
 then, restart apache and you're all set.
 .
 You can use grafana or some other graphing software to visualize the
 data you collected.

Package: golang-github-kresike-postfix-dev
Source: golang-github-kresike-postfix
Version: 0.0.3-1
Architecture: all
Maintainer: Debian Go Packaging Team <team+pkg-go@tracker.debian.org>
Installed-Size: 29
Homepage: https://github.com/kresike/postfix
Priority: optional
Section: devel
Filename: pool/main/g/golang-github-kresike-postfix/golang-github-kresike-postfix-dev_0.0.3-1_all.deb
Size: 5700
SHA256: ba1b76a6530c02127b6630d8e9d8f930ee85e538a786efba34b9387e87eef0d3
SHA1: 625569c2f8c986325bb6567df10ac4f709683bd2
MD5sum: f6d3e8120fd996eec33ad802908e7f01
Description: GO module for handling certain parts of the Postfix mail server ecosystem. (library)
 postfix is a go module for handling certain parts of the postfix mail
 server ecosystem.
 .
 It has nothing to do with languages or text processing whatsoever, unless
 you count reading standard map files used by the postfix mail server.
 .
 There is very little documentation for this module at the moment, this
 will change shortly.

Package: gopopo
Version: 0.0.8-4
Architecture: amd64
Maintainer: Kiss K치roly P치l <kiss.karoly.pal@gmail.com>
Installed-Size: 5727
Depends: libc6 (>= 2.3.2)
Homepage: https://github.com/kresike/gopopo
Priority: optional
Section: devel
Filename: pool/main/g/gopopo/gopopo_0.0.8-4_amd64.deb
Size: 2838260
SHA256: 796dc486a4ce06d022d3de221505c8eb8af687ec14e15c1978043bf0440aa1e5
SHA1: 4f1adb5bbef92c188f729ace9ce098f449f5fb51
MD5sum: 5c5f0fb438fa76c21be5b7154766c5a9
Description: GO Postfix Policy server (program)
 gopopo is a policy server for the Postfix mailer written in GO.
 .
 It does very simple rate limiting of emails based on sasl username or
 sender address where sasl is not available.  Rate limiting is done using
 in memory data, persistence is not implemented (yet?).
 .
 The algorithm used is a simple sliding window, the granularity is 1
 minute and the window length can be set using the configuration file,
 as ell as the default limit for one sender.
 .
 Exceptions can be set in the whitelist file in the form of a postfix
 map file, which has two columns. In the first column a user, domain or
 a sender can be specified, the second column should contain OK, but it
 is not used at the moment.
 .
 If you have domains that need different limits these can be specified
 in the same manner as the whitelist, with the exception that the first
 column can only contain domains.  The second column in this file contains
 the rate limit for that domain.
 .
 These map files do not support comments at this time.
 .
 Configuring the postfix mail server is very simple and can be done in
 two different ways.  The first one is by specifying the policy server
 in the smtpd_recipient_restrictions directive, like this:
 .
 smtpd_recipient_restrictions=check_policy_service inet:127.0.0.1:27091
 .
 This will have the effect of counting every email as 1 message because
 the postfix server does not know how many recipients the email message
 has at this stage.
 .
 The second and recommended way is to specify the policy server in the
 smtpd_data_restrictions directive, like this:
 .
 smtpd_data_restrictions=check_policy_service inet:127.0.0.1:27091
 .
 This will count the emails by looking at the recipients, and counting
 every recipient.  This is recommended, because it prevents users from
 abusing the server by sending emails to multiple recipients.

